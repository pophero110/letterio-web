// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  form          Form[]
  letter        Letter[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Form {
  id     String   @id @default(cuid()) @map("_id")
  userId String?
  user   User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type   String
  letter Letter[]
  field  Field[]
}

model Field {
  id     String @id @default(cuid()) @map("_id")
  formId String
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
  key    String
  value  String
}

model Letter {
  id      String  @id @default(cuid()) @map("_id")
  content String
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  formId  String?
  form    Form?   @relation(fields: [formId], references: [id], onDelete: Cascade)
}
